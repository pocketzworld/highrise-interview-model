// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVERMESSAGE_RS_HIGH_LIFE_FBS_H_
#define FLATBUFFERS_GENERATED_SERVERMESSAGE_RS_HIGH_LIFE_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "Avatar_generated.h"
#include "AvatarJoinedEvent_generated.h"
#include "AvatarLeftEvent_generated.h"
#include "ConnectRoomResponse_generated.h"
#include "VWChatEvent_generated.h"

namespace rs {
namespace high {
namespace life {
namespace fbs {

struct ServerMessage;

enum AnyServerContent {
  AnyServerContent_NONE = 0,
  AnyServerContent_ConnectRoomResponse = 1,
  AnyServerContent_AvatarJoinedEvent = 2,
  AnyServerContent_AvatarLeftEvent = 3,
  AnyServerContent_VWChatEvent = 4,
  AnyServerContent_MIN = AnyServerContent_NONE,
  AnyServerContent_MAX = AnyServerContent_VWChatEvent
};

inline AnyServerContent (&EnumValuesAnyServerContent())[5] {
  static AnyServerContent values[] = {
    AnyServerContent_NONE,
    AnyServerContent_ConnectRoomResponse,
    AnyServerContent_AvatarJoinedEvent,
    AnyServerContent_AvatarLeftEvent,
    AnyServerContent_VWChatEvent
  };
  return values;
}

inline const char **EnumNamesAnyServerContent() {
  static const char *names[] = {
    "NONE",
    "ConnectRoomResponse",
    "AvatarJoinedEvent",
    "AvatarLeftEvent",
    "VWChatEvent",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnyServerContent(AnyServerContent e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesAnyServerContent()[index];
}

template<typename T> struct AnyServerContentTraits {
  static const AnyServerContent enum_value = AnyServerContent_NONE;
};

template<> struct AnyServerContentTraits<rs::high::life::fbs::ConnectRoomResponse> {
  static const AnyServerContent enum_value = AnyServerContent_ConnectRoomResponse;
};

template<> struct AnyServerContentTraits<rs::high::life::fbs::AvatarJoinedEvent> {
  static const AnyServerContent enum_value = AnyServerContent_AvatarJoinedEvent;
};

template<> struct AnyServerContentTraits<rs::high::life::fbs::AvatarLeftEvent> {
  static const AnyServerContent enum_value = AnyServerContent_AvatarLeftEvent;
};

template<> struct AnyServerContentTraits<rs::high::life::fbs::VWChatEvent> {
  static const AnyServerContent enum_value = AnyServerContent_VWChatEvent;
};

bool VerifyAnyServerContent(flatbuffers::Verifier &verifier, const void *obj, AnyServerContent type);
bool VerifyAnyServerContentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct ServerMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CONTENT_TYPE = 4,
    VT_CONTENT = 6
  };
  AnyServerContent content_type() const {
    return static_cast<AnyServerContent>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const rs::high::life::fbs::ConnectRoomResponse *content_as_ConnectRoomResponse() const {
    return content_type() == AnyServerContent_ConnectRoomResponse ? static_cast<const rs::high::life::fbs::ConnectRoomResponse *>(content()) : nullptr;
  }
  const rs::high::life::fbs::AvatarJoinedEvent *content_as_AvatarJoinedEvent() const {
    return content_type() == AnyServerContent_AvatarJoinedEvent ? static_cast<const rs::high::life::fbs::AvatarJoinedEvent *>(content()) : nullptr;
  }
  const rs::high::life::fbs::AvatarLeftEvent *content_as_AvatarLeftEvent() const {
    return content_type() == AnyServerContent_AvatarLeftEvent ? static_cast<const rs::high::life::fbs::AvatarLeftEvent *>(content()) : nullptr;
  }
  const rs::high::life::fbs::VWChatEvent *content_as_VWChatEvent() const {
    return content_type() == AnyServerContent_VWChatEvent ? static_cast<const rs::high::life::fbs::VWChatEvent *>(content()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE) &&
           VerifyOffsetRequired(verifier, VT_CONTENT) &&
           VerifyAnyServerContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const rs::high::life::fbs::ConnectRoomResponse *ServerMessage::content_as<rs::high::life::fbs::ConnectRoomResponse>() const {
  return content_as_ConnectRoomResponse();
}

template<> inline const rs::high::life::fbs::AvatarJoinedEvent *ServerMessage::content_as<rs::high::life::fbs::AvatarJoinedEvent>() const {
  return content_as_AvatarJoinedEvent();
}

template<> inline const rs::high::life::fbs::AvatarLeftEvent *ServerMessage::content_as<rs::high::life::fbs::AvatarLeftEvent>() const {
  return content_as_AvatarLeftEvent();
}

template<> inline const rs::high::life::fbs::VWChatEvent *ServerMessage::content_as<rs::high::life::fbs::VWChatEvent>() const {
  return content_as_VWChatEvent();
}

struct ServerMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content_type(AnyServerContent content_type) {
    fbb_.AddElement<uint8_t>(ServerMessage::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(flatbuffers::Offset<void> content) {
    fbb_.AddOffset(ServerMessage::VT_CONTENT, content);
  }
  ServerMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ServerMessageBuilder &operator=(const ServerMessageBuilder &);
  flatbuffers::Offset<ServerMessage> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<ServerMessage>(end);
    fbb_.Required(o, ServerMessage::VT_CONTENT);
    return o;
  }
};

inline flatbuffers::Offset<ServerMessage> CreateServerMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    AnyServerContent content_type = AnyServerContent_NONE,
    flatbuffers::Offset<void> content = 0) {
  ServerMessageBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline bool VerifyAnyServerContent(flatbuffers::Verifier &verifier, const void *obj, AnyServerContent type) {
  switch (type) {
    case AnyServerContent_NONE: {
      return true;
    }
    case AnyServerContent_ConnectRoomResponse: {
      auto ptr = reinterpret_cast<const rs::high::life::fbs::ConnectRoomResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AnyServerContent_AvatarJoinedEvent: {
      auto ptr = reinterpret_cast<const rs::high::life::fbs::AvatarJoinedEvent *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AnyServerContent_AvatarLeftEvent: {
      auto ptr = reinterpret_cast<const rs::high::life::fbs::AvatarLeftEvent *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AnyServerContent_VWChatEvent: {
      auto ptr = reinterpret_cast<const rs::high::life::fbs::VWChatEvent *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyAnyServerContentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAnyServerContent(
        verifier,  values->Get(i), types->GetEnum<AnyServerContent>(i))) {
      return false;
    }
  }
  return true;
}

inline const rs::high::life::fbs::ServerMessage *GetServerMessage(const void *buf) {
  return flatbuffers::GetRoot<rs::high::life::fbs::ServerMessage>(buf);
}

inline bool VerifyServerMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rs::high::life::fbs::ServerMessage>(nullptr);
}

inline void FinishServerMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rs::high::life::fbs::ServerMessage> root) {
  fbb.Finish(root);
}

}  // namespace fbs
}  // namespace life
}  // namespace high
}  // namespace rs

#endif  // FLATBUFFERS_GENERATED_SERVERMESSAGE_RS_HIGH_LIFE_FBS_H_
