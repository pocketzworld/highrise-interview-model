// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AVATARLEFTEVENT_RS_HIGH_LIFE_FBS_H_
#define FLATBUFFERS_GENERATED_AVATARLEFTEVENT_RS_HIGH_LIFE_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace rs {
namespace high {
namespace life {
namespace fbs {

struct AvatarLeftEvent;

struct AvatarLeftEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USERID = 4
  };
  const flatbuffers::String *userId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_USERID) &&
           verifier.Verify(userId()) &&
           verifier.EndTable();
  }
};

struct AvatarLeftEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_userId(flatbuffers::Offset<flatbuffers::String> userId) {
    fbb_.AddOffset(AvatarLeftEvent::VT_USERID, userId);
  }
  AvatarLeftEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AvatarLeftEventBuilder &operator=(const AvatarLeftEventBuilder &);
  flatbuffers::Offset<AvatarLeftEvent> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<AvatarLeftEvent>(end);
    fbb_.Required(o, AvatarLeftEvent::VT_USERID);
    return o;
  }
};

inline flatbuffers::Offset<AvatarLeftEvent> CreateAvatarLeftEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> userId = 0) {
  AvatarLeftEventBuilder builder_(_fbb);
  builder_.add_userId(userId);
  return builder_.Finish();
}

inline flatbuffers::Offset<AvatarLeftEvent> CreateAvatarLeftEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *userId = nullptr) {
  return rs::high::life::fbs::CreateAvatarLeftEvent(
      _fbb,
      userId ? _fbb.CreateString(userId) : 0);
}

inline const rs::high::life::fbs::AvatarLeftEvent *GetAvatarLeftEvent(const void *buf) {
  return flatbuffers::GetRoot<rs::high::life::fbs::AvatarLeftEvent>(buf);
}

inline bool VerifyAvatarLeftEventBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rs::high::life::fbs::AvatarLeftEvent>(nullptr);
}

inline void FinishAvatarLeftEventBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rs::high::life::fbs::AvatarLeftEvent> root) {
  fbb.Finish(root);
}

}  // namespace fbs
}  // namespace life
}  // namespace high
}  // namespace rs

#endif  // FLATBUFFERS_GENERATED_AVATARLEFTEVENT_RS_HIGH_LIFE_FBS_H_
