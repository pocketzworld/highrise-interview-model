// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VWCHATEVENT_RS_HIGH_LIFE_FBS_H_
#define FLATBUFFERS_GENERATED_VWCHATEVENT_RS_HIGH_LIFE_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace rs {
namespace high {
namespace life {
namespace fbs {

struct VWChatEvent;

struct VWChatEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SENDERID = 4,
    VT_SENDERNAME = 6,
    VT_MESSAGE = 8
  };
  const flatbuffers::String *senderId() const {
    return GetPointer<const flatbuffers::String *>(VT_SENDERID);
  }
  const flatbuffers::String *sendername() const {
    return GetPointer<const flatbuffers::String *>(VT_SENDERNAME);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_SENDERID) &&
           verifier.Verify(senderId()) &&
           VerifyOffsetRequired(verifier, VT_SENDERNAME) &&
           verifier.Verify(sendername()) &&
           VerifyOffsetRequired(verifier, VT_MESSAGE) &&
           verifier.Verify(message()) &&
           verifier.EndTable();
  }
};

struct VWChatEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_senderId(flatbuffers::Offset<flatbuffers::String> senderId) {
    fbb_.AddOffset(VWChatEvent::VT_SENDERID, senderId);
  }
  void add_sendername(flatbuffers::Offset<flatbuffers::String> sendername) {
    fbb_.AddOffset(VWChatEvent::VT_SENDERNAME, sendername);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(VWChatEvent::VT_MESSAGE, message);
  }
  VWChatEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VWChatEventBuilder &operator=(const VWChatEventBuilder &);
  flatbuffers::Offset<VWChatEvent> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<VWChatEvent>(end);
    fbb_.Required(o, VWChatEvent::VT_SENDERID);
    fbb_.Required(o, VWChatEvent::VT_SENDERNAME);
    fbb_.Required(o, VWChatEvent::VT_MESSAGE);
    return o;
  }
};

inline flatbuffers::Offset<VWChatEvent> CreateVWChatEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> senderId = 0,
    flatbuffers::Offset<flatbuffers::String> sendername = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  VWChatEventBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_sendername(sendername);
  builder_.add_senderId(senderId);
  return builder_.Finish();
}

inline flatbuffers::Offset<VWChatEvent> CreateVWChatEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *senderId = nullptr,
    const char *sendername = nullptr,
    const char *message = nullptr) {
  return rs::high::life::fbs::CreateVWChatEvent(
      _fbb,
      senderId ? _fbb.CreateString(senderId) : 0,
      sendername ? _fbb.CreateString(sendername) : 0,
      message ? _fbb.CreateString(message) : 0);
}

inline const rs::high::life::fbs::VWChatEvent *GetVWChatEvent(const void *buf) {
  return flatbuffers::GetRoot<rs::high::life::fbs::VWChatEvent>(buf);
}

inline bool VerifyVWChatEventBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rs::high::life::fbs::VWChatEvent>(nullptr);
}

inline void FinishVWChatEventBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rs::high::life::fbs::VWChatEvent> root) {
  fbb.Finish(root);
}

}  // namespace fbs
}  // namespace life
}  // namespace high
}  // namespace rs

#endif  // FLATBUFFERS_GENERATED_VWCHATEVENT_RS_HIGH_LIFE_FBS_H_
