// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AVATAR_RS_HIGH_LIFE_FBS_H_
#define FLATBUFFERS_GENERATED_AVATAR_RS_HIGH_LIFE_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace rs {
namespace high {
namespace life {
namespace fbs {

struct Avatar;

struct Avatar FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USERID = 4,
    VT_USERNAME = 6
  };
  const flatbuffers::String *userId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  const flatbuffers::String *username() const {
    return GetPointer<const flatbuffers::String *>(VT_USERNAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_USERID) &&
           verifier.Verify(userId()) &&
           VerifyOffsetRequired(verifier, VT_USERNAME) &&
           verifier.Verify(username()) &&
           verifier.EndTable();
  }
};

struct AvatarBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_userId(flatbuffers::Offset<flatbuffers::String> userId) {
    fbb_.AddOffset(Avatar::VT_USERID, userId);
  }
  void add_username(flatbuffers::Offset<flatbuffers::String> username) {
    fbb_.AddOffset(Avatar::VT_USERNAME, username);
  }
  AvatarBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AvatarBuilder &operator=(const AvatarBuilder &);
  flatbuffers::Offset<Avatar> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Avatar>(end);
    fbb_.Required(o, Avatar::VT_USERID);
    fbb_.Required(o, Avatar::VT_USERNAME);
    return o;
  }
};

inline flatbuffers::Offset<Avatar> CreateAvatar(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> userId = 0,
    flatbuffers::Offset<flatbuffers::String> username = 0) {
  AvatarBuilder builder_(_fbb);
  builder_.add_username(username);
  builder_.add_userId(userId);
  return builder_.Finish();
}

inline flatbuffers::Offset<Avatar> CreateAvatarDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *userId = nullptr,
    const char *username = nullptr) {
  return rs::high::life::fbs::CreateAvatar(
      _fbb,
      userId ? _fbb.CreateString(userId) : 0,
      username ? _fbb.CreateString(username) : 0);
}

inline const rs::high::life::fbs::Avatar *GetAvatar(const void *buf) {
  return flatbuffers::GetRoot<rs::high::life::fbs::Avatar>(buf);
}

inline bool VerifyAvatarBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rs::high::life::fbs::Avatar>(nullptr);
}

inline void FinishAvatarBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rs::high::life::fbs::Avatar> root) {
  fbb.Finish(root);
}

}  // namespace fbs
}  // namespace life
}  // namespace high
}  // namespace rs

#endif  // FLATBUFFERS_GENERATED_AVATAR_RS_HIGH_LIFE_FBS_H_
