# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers

class VWChatEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVWChatEvent(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VWChatEvent()
        x.Init(buf, n + offset)
        return x

    # VWChatEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VWChatEvent
    def SenderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # VWChatEvent
    def Sendername(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # VWChatEvent
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def VWChatEventStart(builder): builder.StartObject(3)
def VWChatEventAddSenderId(builder, senderId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(senderId), 0)
def VWChatEventAddSendername(builder, sendername): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sendername), 0)
def VWChatEventAddMessage(builder, message): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)
def VWChatEventEnd(builder): return builder.EndObject()
